# évalue la récurrence f_{n} = f_{n - 1} + f_{n - 2} + (-1)^n, f_0 = 0 et f_1 = 1

.data
    prompt: .asciiz "Entrez une valeur pour n: "
    buffer: .word   1

.text

main:
    la $a0, prompt
    li $v0, 4
    syscall

    la $a0, buffer # read integer
    li $a1, 4
    li $v0, 5
    syscall

    move $a0, $v0
    addi $v0, $zero, 0 # initialise la somme à zéro

    jal f
    j   done

f: # résout un niveau de récurrence, $a0 contient l'argument n
    
    move $s1, $v0
    addi $v0, $zero, 1
    syscall
    move $v0, $s1

    n_0:
        bgt  $a0, $zero, n_1 # n = 0
        addi $v0, $v0, 0
        
        move $t0, $v0
	move $a0, $v0
	li $v0, 1
	syscall
	move $v0, $t0
        jr   $ra

    n_1:
        addi $t0, $zero, 1
        bgt  $a0, $t0, n_n

        addi $v0, $v0, 1
        
        
        move $t0, $v0
	move $a0, $v0
	li $v0, 1
	syscall
	move $v0, $t0
        jr   $ra

    n_n:

        # on stocke $s0 dans la pile
        sw   $s0, -4($sp)
        sw   $ra, -8($sp)
        addi $sp, $sp, -8

        move $s0, $a0      # on garde n dans $s0

        # résout n - 1
        addi $a0, $s0, -1
        jal  f

        # résout n - 2
        addi $a0, $s0, -2
        jal  f

        # calcul de -1^n
        #
        addi $t0, $zero, 2
        div  $s0, $t0

        mfhi $t0
        beq  $t0, $zero, even
    
        addi $v0, $v0, -1 # n est impair, on décrémente la somme

        j    return

    even:
        addi $v0, $v0, 1 # sinon, n est pair

    return:

        addi $sp, $sp, 8
        lw   $s0, -4($sp) # on restitue $s0
        lw   $ra, -8($sp)

	move $t0, $v0
	move $a0, $v0
	li $v0, 1
	syscall
	move $v0, $t0
        jr   $ra

done:
    move $a0, $v0
    li   $v0, 1
    syscall

    li   $v0, 10
    syscall
